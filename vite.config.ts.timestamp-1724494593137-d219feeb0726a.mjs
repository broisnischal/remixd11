// vite.config.ts
import mdx from 'file:///Users/nees/mainport/node_modules/.pnpm/@mdx-js+rollup@3.0.1_rollup@4.20.0/node_modules/@mdx-js/rollup/index.js';
import {
	vitePlugin as remix,
	cloudflareDevProxyVitePlugin as remixCloudflareDevProxy,
} from 'file:///Users/nees/mainport/node_modules/.pnpm/@remix-run+dev@2.11.0_@remix-run+react@2.11.0_typescript@5.5.4_vite@5.3.5_wrangler@3.68.0/node_modules/@remix-run/dev/dist/index.js';
import rehypeMeta from 'file:///Users/nees/mainport/node_modules/.pnpm/rehype-meta@4.0.1/node_modules/rehype-meta/index.js';
import rehypeSlug from 'file:///Users/nees/mainport/node_modules/.pnpm/rehype-slug@6.0.0/node_modules/rehype-slug/index.js';
import remarkFrontmatter from 'file:///Users/nees/mainport/node_modules/.pnpm/remark-frontmatter@5.0.0/node_modules/remark-frontmatter/index.js';
import remarkGfm from 'file:///Users/nees/mainport/node_modules/.pnpm/remark-gfm@4.0.0/node_modules/remark-gfm/index.js';
import remarkMdxFrontmatter from 'file:///Users/nees/mainport/node_modules/.pnpm/remark-mdx-frontmatter@5.0.0/node_modules/remark-mdx-frontmatter/dist/remark-mdx-frontmatter.js';
import { flatRoutes } from 'file:///Users/nees/mainport/node_modules/.pnpm/remix-flat-routes@0.6.5_@remix-run+dev@2.11.0/node_modules/remix-flat-routes/dist/index.js';
import { defineConfig } from 'file:///Users/nees/mainport/node_modules/.pnpm/vite@5.3.5/node_modules/vite/dist/node/index.js';
import tsconfigPaths from 'file:///Users/nees/mainport/node_modules/.pnpm/vite-tsconfig-paths@4.3.2_typescript@5.5.4_vite@5.3.5/node_modules/vite-tsconfig-paths/dist/index.mjs';
import rehypeAutolinkHeadings from 'file:///Users/nees/mainport/node_modules/.pnpm/rehype-autolink-headings@7.1.0/node_modules/rehype-autolink-headings/index.js';

// load-context.ts
function getLoadContext({ context }) {
	return {
		env: context.cloudflare.env,
		cf: context.cloudflare.cf,
		ctx: context.cloudflare.ctx,
		cache: context.cloudflare.caches,
	};
}

// vite.config.ts
import rehypeExpressiveCode from 'file:///Users/nees/mainport/node_modules/.pnpm/rehype-expressive-code@0.35.6/node_modules/rehype-expressive-code/dist/index.js';
var rehypeExpressiveCodeOptions = {
	defaultProps: {
		// Enable word wrap by default
		wrap: true,
		// Disable wrapped line indentation for terminal languages
		overridesByLang: {
			'bash,ps,sh': { preserveIndent: false },
		},
	},
	themes: ['dark-plus'],
	frames: {
		// Example: Hide the "Copy to clipboard" button
		showCopyToClipboardButton: false,
	},
	shiki: {
		// You can pass additional plugin options here,
		// e.g. to load custom language grammars:
		langs: [
			// import('./some-exported-grammar.mjs'),
			// JSON.parse(fs.readFileSync('./some-json-grammar.json', 'utf-8'))
		],
	},
	// You can add configuration options here
};
var vite_config_default = defineConfig({
	plugins: [
		remixCloudflareDevProxy({ getLoadContext }),
		mdx({
			remarkPlugins: [remarkFrontmatter, remarkMdxFrontmatter, remarkGfm],
			rehypePlugins: [
				// rehypeAutolinkHeadings,
				rehypeSlug,
				rehypeMeta,
				rehypeAutolinkHeadings,
				// [rehypeToc, options],
				// [rehypePrism, { autolinker: true }],
				// [remarkToc, { ordered: true, tight: false }],
				// [
				// 	rehypePrettyCode,
				// 	{
				// 		// theme: 'material-theme-darker',
				// 		theme: 'vesper', // dark-plus
				// 	},
				// ],
				// [rehypePrism, { plugins: ['line-numbers'] }],
				[rehypeExpressiveCode, rehypeExpressiveCodeOptions],
			],
		}),
		remix({
			future: {
				// unstable_lazyRouteDiscovery: true,
				// unstable_singleFetch: true,
			},
			// ssr: true,
			routes(defineRoutes) {
				return flatRoutes('routes', defineRoutes);
			},
		}),
		tsconfigPaths(),
	],
	// build: {
	// 	rollupOptions: {
	// 		output: {
	// 			manualChunks(id) {
	// 				if (id.includes('node_modules')) {
	// 					return 'vendor';
	// 				}
	// 			},
	// 		},
	// 	},
	// 	minify: 'esbuild',
	// 	cssMinify: true,
	// 	ssr: true,
	// 	chunkSizeWarningLimit: 600, // Adjust chunk size warning limit as needed
	// },
});
export { vite_config_default as default };
//# sourceMappingURL=data:application/json;base64,
